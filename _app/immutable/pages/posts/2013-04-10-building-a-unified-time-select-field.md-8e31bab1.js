import{S as Us,i as Gs,s as Js,D as ws,x as Ks,y as Ns,z as Qs,A as Ws,B as Ds,r as Xs,p as Ys,C as sa,L as Bs,e as p,t,k as b,c as l,a as i,h as e,d as n,m as w,b as h,g as m,I as a,n as aa}from"../../chunks/index-f5f19c4c.js";import{P as na}from"../../chunks/post-58fa2fac.js";import"../../chunks/settings-ae4c19cc.js";function ta(O){let o,_,y,r,c,d,L,Q,H,W,X,j,Y,ss,D,as,ns,B,ts,es,Z,E,Ms=`<code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"field"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:start_time</span><span class="token punctuation">,</span>
              <span class="token symbol">:label</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"Start Time:"</span></span><span class="token punctuation">,</span>
              <span class="token symbol">:default</span><span class="token operator">=></span>appt<span class="token punctuation">.</span>start_time<span class="token punctuation">,</span>
              <span class="token symbol">:wrapper</span><span class="token operator">=></span><span class="token boolean">false</span><span class="token punctuation">,</span>
              <span class="token symbol">:simple_time_select</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>
              <span class="token symbol">:label_html</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token symbol">:class</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"head"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token symbol">:minute_interval</span> <span class="token operator">=></span> <span class="token number">5</span><span class="token punctuation">,</span>
              <span class="token symbol">:time_separator</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>
              <span class="token symbol">:start_hour</span> <span class="token operator">=></span> <span class="token number">06</span><span class="token punctuation">,</span>
              <span class="token symbol">:end_hour</span> <span class="token operator">=></span> <span class="token number">17</span>
   <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span></code>`,U,g,os,I,ps,ls,V,is,rs,G,S,qs=`<code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"field"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%- time_start = Time.now.change(:hour=>6,:minute=>0) %>
  &lt;%-</span></span> time_end <span class="token operator">=</span> <span class="token builtin">Time</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token symbol">:hour</span><span class="token operator">=></span><span class="token number">17</span><span class="token punctuation">,</span><span class="token symbol">:minute</span><span class="token operator">=></span><span class="token number">55</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>
  &lt;%- period = 5.minutes %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:start_time</span><span class="token punctuation">,</span>
           <span class="token symbol">:as</span><span class="token operator">=></span><span class="token symbol">:collection_select</span><span class="token punctuation">,</span>
           <span class="token symbol">:required</span><span class="token operator">=></span><span class="token boolean">true</span><span class="token punctuation">,</span>
           <span class="token symbol">:include_blank</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>
           <span class="token symbol">:selected</span><span class="token operator">=></span><span class="token punctuation">(</span>
             f<span class="token punctuation">.</span>object<span class="token punctuation">.</span>start_time<span class="token punctuation">.</span>blank<span class="token operator">?</span> <span class="token operator">?</span>
               <span class="token string-literal"><span class="token string">""</span></span> <span class="token operator">:</span> f<span class="token punctuation">.</span>object<span class="token punctuation">.</span>start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%H:%M"</span></span><span class="token punctuation">)</span>
           <span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token symbol">:input_html</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
             <span class="token symbol">:name</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"appt[start_time(5i)]"</span></span><span class="token punctuation">,</span>
             <span class="token symbol">:id</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"appt_start_time_5i"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
           <span class="token symbol">:collection</span><span class="token operator">=></span> <span class="token punctuation">(</span>
             <span class="token punctuation">[</span>time_start<span class="token punctuation">]</span><span class="token punctuation">.</span>tap<span class="token punctuation">&#123;</span>
               <span class="token operator">|</span>array<span class="token operator">|</span> array <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">.</span>last <span class="token operator">+</span> period
                 <span class="token keyword">while</span> array<span class="token punctuation">.</span>last <span class="token operator">&lt;</span> time_end
             <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">&#123;</span>
               <span class="token operator">|</span>t<span class="token operator">|</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%l:%M %p"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%H:%M"</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>
             <span class="token punctuation">&#125;</span>
   <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span></code>`,J,P,cs,K,$,us,N,k,C,R,ms,ds,ks,M,x,fs,hs,q,A,_s,ys,z,T,gs;return{c(){o=p("p"),_=t(`Before I migrated to Rails 3.2, I used a plugin to provide a unified input field
for time_select with either the standard Rails ActionView or the SimpleForm gem
(SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade
caused my gem to\xA0inexplicably\xA0stop working. I had a deadline to meet and could
not be bothered with complicated solutions. I searched and searched for
alternatives to this fine gem, but none were found. Then it hit me: why not just
write my own code and replace the inputs with my own code? Surely it can\u2019t take
too long to build a time input based on the simple_time_select gem!\xA0So here it
is: my simple version of the gem, with only a few modifications from the
simple_time_select gem.`),y=b(),r=p("p"),c=t(`Here is my old code, utilizing simple_time_select. The gem is used only
if\xA0`),d=p("code"),L=t(":simple_time_select"),Q=t(" is true, and it\xA0uses the "),H=p("code"),W=t(":minute_interval"),X=t(`,
`),j=p("code"),Y=t(":time_separator"),ss=t(", "),D=p("code"),as=t(":start_hour"),ns=t(", "),B=p("code"),ts=t(":end_hour"),es=t(`, and a host of other options for setting
the times. I wish it had a way for specifying just a start_time and end_time.`),Z=b(),E=p("pre"),U=b(),g=p("p"),os=t(`I had to search for an algorithm to use for the periodicity, and settled on the
algorithm discussed in `),I=p("a"),ps=t(`this discussion on Stack
Overflow`),ls=t(`,
and is inlined as the :collection option. Since the \u{1F61B}efault option removes the
inital blank I wanted as the first item in the list, I has to add a blank
`),V=p("code"),is=t(":include_blank"),rs=t(" option."),G=b(),S=p("pre"),J=b(),P=p("p"),cs=t(`I am sure you can wrap this in a Helper class somewhere, and it should be easy
to monkeypatch ActiveView or SimpleForm to display this instead of the default.`),K=b(),$=p("p"),us=t("References:"),N=b(),k=p("ul"),C=p("li"),R=p("a"),ms=t("Stack Overflow discussion on time periodicity in Rails"),ds=t(" (used for periodicity algorithm)"),ks=b(),M=p("li"),x=p("a"),fs=t("Tutorial on using simple_time_select"),hs=b(),q=p("li"),A=p("a"),_s=t("SimpleForm gem"),ys=b(),z=p("li"),T=p("a"),gs=t("simple_time_select gem"),this.h()},l(s){o=l(s,"P",{});var u=i(o);_=e(u,`Before I migrated to Rails 3.2, I used a plugin to provide a unified input field
for time_select with either the standard Rails ActionView or the SimpleForm gem
(SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade
caused my gem to\xA0inexplicably\xA0stop working. I had a deadline to meet and could
not be bothered with complicated solutions. I searched and searched for
alternatives to this fine gem, but none were found. Then it hit me: why not just
write my own code and replace the inputs with my own code? Surely it can\u2019t take
too long to build a time input based on the simple_time_select gem!\xA0So here it
is: my simple version of the gem, with only a few modifications from the
simple_time_select gem.`),u.forEach(n),y=w(s),r=l(s,"P",{});var f=i(r);c=e(f,`Here is my old code, utilizing simple_time_select. The gem is used only
if\xA0`),d=l(f,"CODE",{});var vs=i(d);L=e(vs,":simple_time_select"),vs.forEach(n),Q=e(f," is true, and it\xA0uses the "),H=l(f,"CODE",{});var Es=i(H);W=e(Es,":minute_interval"),Es.forEach(n),X=e(f,`,
`),j=l(f,"CODE",{});var Is=i(j);Y=e(Is,":time_separator"),Is.forEach(n),ss=e(f,", "),D=l(f,"CODE",{});var Ss=i(D);as=e(Ss,":start_hour"),Ss.forEach(n),ns=e(f,", "),B=l(f,"CODE",{});var Rs=i(B);ts=e(Rs,":end_hour"),Rs.forEach(n),es=e(f,`, and a host of other options for setting
the times. I wish it had a way for specifying just a start_time and end_time.`),f.forEach(n),Z=w(s),E=l(s,"PRE",{class:!0});var zs=i(E);zs.forEach(n),U=w(s),g=l(s,"P",{});var F=i(g);os=e(F,`I had to search for an algorithm to use for the periodicity, and settled on the
algorithm discussed in `),I=l(F,"A",{href:!0,rel:!0});var xs=i(I);ps=e(xs,`this discussion on Stack
Overflow`),xs.forEach(n),ls=e(F,`,
and is inlined as the :collection option. Since the \u{1F61B}efault option removes the
inital blank I wanted as the first item in the list, I has to add a blank
`),V=l(F,"CODE",{});var As=i(V);is=e(As,":include_blank"),As.forEach(n),rs=e(F," option."),F.forEach(n),G=w(s),S=l(s,"PRE",{class:!0});var Zs=i(S);Zs.forEach(n),J=w(s),P=l(s,"P",{});var Ts=i(P);cs=e(Ts,`I am sure you can wrap this in a Helper class somewhere, and it should be easy
to monkeypatch ActiveView or SimpleForm to display this instead of the default.`),Ts.forEach(n),K=w(s),$=l(s,"P",{});var Os=i($);us=e(Os,"References:"),Os.forEach(n),N=w(s),k=l(s,"UL",{});var v=i(k);C=l(v,"LI",{});var bs=i(C);R=l(bs,"A",{href:!0,rel:!0});var Ls=i(R);ms=e(Ls,"Stack Overflow discussion on time periodicity in Rails"),Ls.forEach(n),ds=e(bs," (used for periodicity algorithm)"),bs.forEach(n),ks=w(v),M=l(v,"LI",{});var Ps=i(M);x=l(Ps,"A",{href:!0,rel:!0});var $s=i(x);fs=e($s,"Tutorial on using simple_time_select"),$s.forEach(n),Ps.forEach(n),hs=w(v),q=l(v,"LI",{});var Cs=i(q);A=l(Cs,"A",{href:!0,rel:!0});var Fs=i(A);_s=e(Fs,"SimpleForm gem"),Fs.forEach(n),Cs.forEach(n),ys=w(v),z=l(v,"LI",{});var Hs=i(z);T=l(Hs,"A",{href:!0,rel:!0});var js=i(T);gs=e(js,"simple_time_select gem"),js.forEach(n),Hs.forEach(n),v.forEach(n),this.h()},h(){h(E,"class","language-ruby"),h(I,"href","http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times"),h(I,"rel","nofollow"),h(S,"class","language-ruby"),h(R,"href","http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times"),h(R,"rel","nofollow"),h(x,"href","http://www.tonyamoyal.com/2009/04/21/simple-time-select-the-most-compact-time_select-for-ruby-on-rails/"),h(x,"rel","nofollow"),h(A,"href","https://github.com/plataformatec/simple_form"),h(A,"rel","nofollow"),h(T,"href","https://github.com/tamoyal/simple_time_select"),h(T,"rel","nofollow")},m(s,u){m(s,o,u),a(o,_),m(s,y,u),m(s,r,u),a(r,c),a(r,d),a(d,L),a(r,Q),a(r,H),a(H,W),a(r,X),a(r,j),a(j,Y),a(r,ss),a(r,D),a(D,as),a(r,ns),a(r,B),a(B,ts),a(r,es),m(s,Z,u),m(s,E,u),E.innerHTML=Ms,m(s,U,u),m(s,g,u),a(g,os),a(g,I),a(I,ps),a(g,ls),a(g,V),a(V,is),a(g,rs),m(s,G,u),m(s,S,u),S.innerHTML=qs,m(s,J,u),m(s,P,u),a(P,cs),m(s,K,u),m(s,$,u),a($,us),m(s,N,u),m(s,k,u),a(k,C),a(C,R),a(R,ms),a(C,ds),a(k,ks),a(k,M),a(M,x),a(x,fs),a(k,hs),a(k,q),a(q,A),a(A,_s),a(k,ys),a(k,z),a(z,T),a(T,gs)},p:aa,d(s){s&&n(o),s&&n(y),s&&n(r),s&&n(Z),s&&n(E),s&&n(U),s&&n(g),s&&n(G),s&&n(S),s&&n(J),s&&n(P),s&&n(K),s&&n($),s&&n(N),s&&n(k)}}}function ea(O){let o,_;const y=[O[0],Vs];let r={$$slots:{default:[ta]},$$scope:{ctx:O}};for(let c=0;c<y.length;c+=1)r=ws(r,y[c]);return o=new na({props:r}),{c(){Ks(o.$$.fragment)},l(c){Ns(o.$$.fragment,c)},m(c,d){Qs(o,c,d),_=!0},p(c,[d]){const L=d&1?Ws(y,[d&1&&Ds(c[0]),d&0&&Ds(Vs)]):{};d&2&&(L.$$scope={dirty:d,ctx:c}),o.$set(L)},i(c){_||(Xs(o.$$.fragment,c),_=!0)},o(c){Ys(o.$$.fragment,c),_=!1},d(c){sa(o,c)}}}const Vs={comments:!0,view:"post",layout:"post",lang:"en",author:"skamansam",title:"Building a unified `time_select` field",description:"Build a unified `time_select` field",excerpt:"I was happy until the Rails upgrade caused my gem to\xA0inexplicably\xA0stop working.",cover:!1,coverImage:!1,coverAlt:"RBE Logo",categories:["ruby"],tags:["Ruby on Rails"],created_at:"2013-04-10T11:10:11.000Z",updated_at:"2013-04-10T11:10:11.000Z"};function oa(O,o,_){return O.$$set=y=>{_(0,o=ws(ws({},o),Bs(y)))},o=Bs(o),[o]}class ra extends Us{constructor(o){super(),Gs(this,o,oa,ea,Js,{})}}export{ra as default,Vs as metadata};
