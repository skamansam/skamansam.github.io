import{S as Us,i as Gs,s as Js,D as bs,x as Ks,y as Ns,z as Qs,A as Ws,B as $s,r as Xs,p as Ys,C as sa,L as js,e as p,t as n,k as w,c as l,a as i,h as e,d as t,m as b,b as f,g as m,I as a,n as aa}from"../../chunks/index-ee30ad4e.js";import{P as ta}from"../../chunks/post-d418ea34.js";import"../../chunks/settings-69239d06.js";function na(T){let o,_,g,r,c,d,V,Q,L,W,X,P,Y,ss,$,as,ts,j,ns,es,Z,I,Ms=`<code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"field"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:start_time</span><span class="token punctuation">,</span>
              <span class="token symbol">:label</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"Start Time:"</span></span><span class="token punctuation">,</span>
              <span class="token symbol">:default</span><span class="token operator">=></span>appt<span class="token punctuation">.</span>start_time<span class="token punctuation">,</span>
              <span class="token symbol">:wrapper</span><span class="token operator">=></span><span class="token boolean">false</span><span class="token punctuation">,</span>
              <span class="token symbol">:simple_time_select</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>
              <span class="token symbol">:label_html</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token symbol">:class</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"head"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token symbol">:minute_interval</span> <span class="token operator">=></span> <span class="token number">5</span><span class="token punctuation">,</span>
              <span class="token symbol">:time_separator</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>
              <span class="token symbol">:start_hour</span> <span class="token operator">=></span> <span class="token number">06</span><span class="token punctuation">,</span>
              <span class="token symbol">:end_hour</span> <span class="token operator">=></span> <span class="token number">17</span>
   <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span></code>`,U,y,os,E,ps,ls,D,is,rs,G,S,qs=`<code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"field"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%- time_start = Time.now.change(:hour=>6,:minute=>0) %>
  &lt;%-</span></span> time_end <span class="token operator">=</span> <span class="token builtin">Time</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token symbol">:hour</span><span class="token operator">=></span><span class="token number">17</span><span class="token punctuation">,</span><span class="token symbol">:minute</span><span class="token operator">=></span><span class="token number">55</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>
  &lt;%- period = 5.minutes %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:start_time</span><span class="token punctuation">,</span>
           <span class="token symbol">:as</span><span class="token operator">=></span><span class="token symbol">:collection_select</span><span class="token punctuation">,</span>
           <span class="token symbol">:required</span><span class="token operator">=></span><span class="token boolean">true</span><span class="token punctuation">,</span>
           <span class="token symbol">:include_blank</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">,</span>
           <span class="token symbol">:selected</span><span class="token operator">=></span><span class="token punctuation">(</span>
             f<span class="token punctuation">.</span>object<span class="token punctuation">.</span>start_time<span class="token punctuation">.</span>blank<span class="token operator">?</span> <span class="token operator">?</span>
               <span class="token string-literal"><span class="token string">""</span></span> <span class="token operator">:</span> f<span class="token punctuation">.</span>object<span class="token punctuation">.</span>start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%H:%M"</span></span><span class="token punctuation">)</span>
           <span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token symbol">:input_html</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
             <span class="token symbol">:name</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"appt[start_time(5i)]"</span></span><span class="token punctuation">,</span>
             <span class="token symbol">:id</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"appt_start_time_5i"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
           <span class="token symbol">:collection</span><span class="token operator">=></span> <span class="token punctuation">(</span>
             <span class="token punctuation">[</span>time_start<span class="token punctuation">]</span><span class="token punctuation">.</span>tap<span class="token punctuation">&#123;</span>
               <span class="token operator">|</span>array<span class="token operator">|</span> array <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">.</span>last <span class="token operator">+</span> period
                 <span class="token keyword">while</span> array<span class="token punctuation">.</span>last <span class="token operator">&lt;</span> time_end
             <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">&#123;</span>
               <span class="token operator">|</span>t<span class="token operator">|</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%l:%M %p"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%H:%M"</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>
             <span class="token punctuation">&#125;</span>
   <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span></code>`,J,O,cs,K,B,us,N,k,C,R,ms,ds,ks,M,A,hs,fs,q,x,_s,gs,z,F,ys;return{c(){o=p("p"),_=n(`Before I migrated to Rails 3.2, I used a plugin to provide a unified input field
for time_select with either the standard Rails ActionView or the SimpleForm gem
(SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade
caused my gem to\xA0inexplicably\xA0stop working. I had a deadline to meet and could
not be bothered with complicated solutions. I searched and searched for
alternatives to this fine gem, but none were found. Then it hit me: why not just
write my own code and replace the inputs with my own code? Surely it can\u2019t take
too long to build a time input based on the simple_time_select gem!\xA0So here it
is: my simple version of the gem, with only a few modifications from the
simple_time_select gem.`),g=w(),r=p("p"),c=n(`Here is my old code, utilizing simple_time_select. The gem is used only
if\xA0`),d=p("code"),V=n(":simple_time_select"),Q=n(" is true, and it\xA0uses the "),L=p("code"),W=n(":minute_interval"),X=n(`,
`),P=p("code"),Y=n(":time_separator"),ss=n(", "),$=p("code"),as=n(":start_hour"),ts=n(", "),j=p("code"),ns=n(":end_hour"),es=n(`, and a host of other options for setting
the times. I wish it had a way for specifying just a start_time and end_time.`),Z=w(),I=p("pre"),U=w(),y=p("p"),os=n(`I had to search for an algorithm to use for the periodicity, and settled on the
algorithm discussed in `),E=p("a"),ps=n(`this discussion on Stack
Overflow`),ls=n(`,
and is inlined as the :collection option. Since the \u{1F61B}efault option removes the
inital blank I wanted as the first item in the list, I has to add a blank
`),D=p("code"),is=n(":include_blank"),rs=n(" option."),G=w(),S=p("pre"),J=w(),O=p("p"),cs=n(`I am sure you can wrap this in a Helper class somewhere, and it should be easy
to monkeypatch ActiveView or SimpleForm to display this instead of the default.`),K=w(),B=p("p"),us=n("References:"),N=w(),k=p("ul"),C=p("li"),R=p("a"),ms=n("Stack Overflow discussion on time periodicity in Rails"),ds=n(" (used for periodicity algorithm)"),ks=w(),M=p("li"),A=p("a"),hs=n("Tutorial on using simple_time_select"),fs=w(),q=p("li"),x=p("a"),_s=n("SimpleForm gem"),gs=w(),z=p("li"),F=p("a"),ys=n("simple_time_select gem"),this.h()},l(s){o=l(s,"P",{});var u=i(o);_=e(u,`Before I migrated to Rails 3.2, I used a plugin to provide a unified input field
for time_select with either the standard Rails ActionView or the SimpleForm gem
(SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade
caused my gem to\xA0inexplicably\xA0stop working. I had a deadline to meet and could
not be bothered with complicated solutions. I searched and searched for
alternatives to this fine gem, but none were found. Then it hit me: why not just
write my own code and replace the inputs with my own code? Surely it can\u2019t take
too long to build a time input based on the simple_time_select gem!\xA0So here it
is: my simple version of the gem, with only a few modifications from the
simple_time_select gem.`),u.forEach(t),g=b(s),r=l(s,"P",{});var h=i(r);c=e(h,`Here is my old code, utilizing simple_time_select. The gem is used only
if\xA0`),d=l(h,"CODE",{});var vs=i(d);V=e(vs,":simple_time_select"),vs.forEach(t),Q=e(h," is true, and it\xA0uses the "),L=l(h,"CODE",{});var Is=i(L);W=e(Is,":minute_interval"),Is.forEach(t),X=e(h,`,
`),P=l(h,"CODE",{});var Es=i(P);Y=e(Es,":time_separator"),Es.forEach(t),ss=e(h,", "),$=l(h,"CODE",{});var Ss=i($);as=e(Ss,":start_hour"),Ss.forEach(t),ts=e(h,", "),j=l(h,"CODE",{});var Rs=i(j);ns=e(Rs,":end_hour"),Rs.forEach(t),es=e(h,`, and a host of other options for setting
the times. I wish it had a way for specifying just a start_time and end_time.`),h.forEach(t),Z=b(s),I=l(s,"PRE",{class:!0});var zs=i(I);zs.forEach(t),U=b(s),y=l(s,"P",{});var H=i(y);os=e(H,`I had to search for an algorithm to use for the periodicity, and settled on the
algorithm discussed in `),E=l(H,"A",{href:!0,rel:!0});var As=i(E);ps=e(As,`this discussion on Stack
Overflow`),As.forEach(t),ls=e(H,`,
and is inlined as the :collection option. Since the \u{1F61B}efault option removes the
inital blank I wanted as the first item in the list, I has to add a blank
`),D=l(H,"CODE",{});var xs=i(D);is=e(xs,":include_blank"),xs.forEach(t),rs=e(H," option."),H.forEach(t),G=b(s),S=l(s,"PRE",{class:!0});var Zs=i(S);Zs.forEach(t),J=b(s),O=l(s,"P",{});var Fs=i(O);cs=e(Fs,`I am sure you can wrap this in a Helper class somewhere, and it should be easy
to monkeypatch ActiveView or SimpleForm to display this instead of the default.`),Fs.forEach(t),K=b(s),B=l(s,"P",{});var Ts=i(B);us=e(Ts,"References:"),Ts.forEach(t),N=b(s),k=l(s,"UL",{});var v=i(k);C=l(v,"LI",{});var ws=i(C);R=l(ws,"A",{href:!0,rel:!0});var Vs=i(R);ms=e(Vs,"Stack Overflow discussion on time periodicity in Rails"),Vs.forEach(t),ds=e(ws," (used for periodicity algorithm)"),ws.forEach(t),ks=b(v),M=l(v,"LI",{});var Os=i(M);A=l(Os,"A",{href:!0,rel:!0});var Bs=i(A);hs=e(Bs,"Tutorial on using simple_time_select"),Bs.forEach(t),Os.forEach(t),fs=b(v),q=l(v,"LI",{});var Cs=i(q);x=l(Cs,"A",{href:!0,rel:!0});var Hs=i(x);_s=e(Hs,"SimpleForm gem"),Hs.forEach(t),Cs.forEach(t),gs=b(v),z=l(v,"LI",{});var Ls=i(z);F=l(Ls,"A",{href:!0,rel:!0});var Ps=i(F);ys=e(Ps,"simple_time_select gem"),Ps.forEach(t),Ls.forEach(t),v.forEach(t),this.h()},h(){f(I,"class","language-ruby"),f(E,"href","http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times"),f(E,"rel","nofollow"),f(S,"class","language-ruby"),f(R,"href","http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times"),f(R,"rel","nofollow"),f(A,"href","http://www.tonyamoyal.com/2009/04/21/simple-time-select-the-most-compact-time_select-for-ruby-on-rails/"),f(A,"rel","nofollow"),f(x,"href","https://github.com/plataformatec/simple_form"),f(x,"rel","nofollow"),f(F,"href","https://github.com/tamoyal/simple_time_select"),f(F,"rel","nofollow")},m(s,u){m(s,o,u),a(o,_),m(s,g,u),m(s,r,u),a(r,c),a(r,d),a(d,V),a(r,Q),a(r,L),a(L,W),a(r,X),a(r,P),a(P,Y),a(r,ss),a(r,$),a($,as),a(r,ts),a(r,j),a(j,ns),a(r,es),m(s,Z,u),m(s,I,u),I.innerHTML=Ms,m(s,U,u),m(s,y,u),a(y,os),a(y,E),a(E,ps),a(y,ls),a(y,D),a(D,is),a(y,rs),m(s,G,u),m(s,S,u),S.innerHTML=qs,m(s,J,u),m(s,O,u),a(O,cs),m(s,K,u),m(s,B,u),a(B,us),m(s,N,u),m(s,k,u),a(k,C),a(C,R),a(R,ms),a(C,ds),a(k,ks),a(k,M),a(M,A),a(A,hs),a(k,fs),a(k,q),a(q,x),a(x,_s),a(k,gs),a(k,z),a(z,F),a(F,ys)},p:aa,d(s){s&&t(o),s&&t(g),s&&t(r),s&&t(Z),s&&t(I),s&&t(U),s&&t(y),s&&t(G),s&&t(S),s&&t(J),s&&t(O),s&&t(K),s&&t(B),s&&t(N),s&&t(k)}}}function ea(T){let o,_;const g=[T[0],Ds];let r={$$slots:{default:[na]},$$scope:{ctx:T}};for(let c=0;c<g.length;c+=1)r=bs(r,g[c]);return o=new ta({props:r}),{c(){Ks(o.$$.fragment)},l(c){Ns(o.$$.fragment,c)},m(c,d){Qs(o,c,d),_=!0},p(c,[d]){const V=d&1?Ws(g,[d&1&&$s(c[0]),d&0&&$s(Ds)]):{};d&2&&(V.$$scope={dirty:d,ctx:c}),o.$set(V)},i(c){_||(Xs(o.$$.fragment,c),_=!0)},o(c){Ys(o.$$.fragment,c),_=!1},d(c){sa(o,c)}}}const Ds={comments:!0,view:"post",layout:"post",lang:"en",author:"skamansam",title:"Building a unified `time_select` field",description:"Build a unified `time_select` field",excerpt:"I was happy until the Rails upgrade caused my gem to\xA0inexplicably\xA0stop working.",cover:!1,coverImage:!1,coverAlt:"RBE Logo",categories:["ruby"],tags:["Ruby on Rails"],created_at:"2013-04-10T11:10:11.000Z",updated_at:"2013-04-10T11:10:11.000Z",readingTime:{text:"2 min read",minutes:1.75,time:105e3,words:350},preview:`Before I migrated to Rails 3.2, I used a plugin to provide a unified input field
for time_select with either the standard Rails ActionView or the SimpleForm gem
(SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade
caused...`,previewHtml:"<p>Before I migrated to Rails 3.2, I used a plugin to provide a unified input field for time_select with either the standard Rails ActionView or the SimpleForm gem (SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade caused m...</p>",textContent:`Before I migrated to Rails 3.2, I used a plugin to provide a unified input field
for time_select with either the standard Rails ActionView or the SimpleForm gem
(SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade
caused my gem to\xA0inexplicably\xA0stop working. I had a...`};function oa(T,o,_){return T.$$set=g=>{_(0,o=bs(bs({},o),js(g)))},o=js(o),[o]}class ra extends Us{constructor(o){super(),Gs(this,o,oa,ea,Js,{})}}export{ra as default,Ds as metadata};
