import{S as L,i as Z,s as q,D as j,x as z,y as D,z as G,A as U,B as T,r as V,p as J,C as K,L as B,e as f,t as k,k as v,c as g,a as y,h as I,d as n,m as _,b as N,g as i,I as b,n as Q}from"../../chunks/index-f0cd6aaa.js";import{P as W}from"../../chunks/post-d11a0746.js";import"../../chunks/stores-707f9fa0.js";import"../../chunks/settings-69239d06.js";function X(u){let t,p,r,l,a,o,c,M,w,m,O=`<code class="language-perl"><span class="token comment">#!/usr/bin/perl</span>

processFile<span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">)</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">@ARGV</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#recursively fix images</span>
<span class="token keyword">sub</span> <span class="token function">processFile</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">my</span> <span class="token variable">$file</span><span class="token operator">=</span>shift<span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-d</span> <span class="token string">"$file"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span> <span class="token keyword">do</span><span class="token punctuation">&#123;</span> processFile<span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">)</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token string">"$file"</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">&#96;convert "$file" "$file"&#96;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,x,h,S,$,d,P;return{c(){t=f("p"),p=k(`I have been doing a lot of importing of photos on my photo site, and have noticed some images do not display properly.
Since I love ImageMagick so much,\xA0I set up\xA0 my gallery to use it. However, there appears to be a check in the Coppermine
software that aborts reading the file upon errors in the image. So I typed the command \u201Cdisplay imagename.jpg\u201D for some
of the files that did not import properly, and everything appeared to be fine. But I did notice something peculiar about
the images: they were taken with my phone\u2019s camera and all had errors printed out when I tried to open them, but seem to
display correctly.`),r=v(),l=f("p"),a=k(`Since these files could be opened by ImageMagick, I figured if I saved them again, I would be able to fix the errors. I
ran \u201Cconvert image1.jpg image1.jpg\u201D, got the familiar errors printed and opened the file again. This time, no errors!
But since I have a\xA0 lot of files I want to import, I needed a way to convert a bunch at once.`),o=v(),c=f("p"),M=k(`I created a neat little Perl script to do just that. All you need is ImageMagick and perl installed. This script does
not rely on PerlMagick, as it runs the convert command. So here it is:`),w=v(),m=f("pre"),x=v(),h=f("p"),S=k(`I saved this file as $HOME/bin/fiximage. All you need to do to run it is type \u201Cfiximage file1 file2 directory1 directory2 \u2026\u201C.
One other thing to note is that this script has been purposefully shortened. I like to use the ternary operator whenever
possible in my scripts for just this reason. As such, it does not print anything to the command line itself, but if the
convert command encounters an error, that will be printed.`),$=v(),d=f("p"),P=k("I hope you have found this article useful!"),this.h()},l(e){t=g(e,"P",{});var s=y(t);p=I(s,`I have been doing a lot of importing of photos on my photo site, and have noticed some images do not display properly.
Since I love ImageMagick so much,\xA0I set up\xA0 my gallery to use it. However, there appears to be a check in the Coppermine
software that aborts reading the file upon errors in the image. So I typed the command \u201Cdisplay imagename.jpg\u201D for some
of the files that did not import properly, and everything appeared to be fine. But I did notice something peculiar about
the images: they were taken with my phone\u2019s camera and all had errors printed out when I tried to open them, but seem to
display correctly.`),s.forEach(n),r=_(e),l=g(e,"P",{});var E=y(l);a=I(E,`Since these files could be opened by ImageMagick, I figured if I saved them again, I would be able to fix the errors. I
ran \u201Cconvert image1.jpg image1.jpg\u201D, got the familiar errors printed and opened the file again. This time, no errors!
But since I have a\xA0 lot of files I want to import, I needed a way to convert a bunch at once.`),E.forEach(n),o=_(e),c=g(e,"P",{});var H=y(c);M=I(H,`I created a neat little Perl script to do just that. All you need is ImageMagick and perl installed. This script does
not rely on PerlMagick, as it runs the convert command. So here it is:`),H.forEach(n),w=_(e),m=g(e,"PRE",{class:!0});var F=y(m);F.forEach(n),x=_(e),h=g(e,"P",{});var A=y(h);S=I(A,`I saved this file as $HOME/bin/fiximage. All you need to do to run it is type \u201Cfiximage file1 file2 directory1 directory2 \u2026\u201C.
One other thing to note is that this script has been purposefully shortened. I like to use the ternary operator whenever
possible in my scripts for just this reason. As such, it does not print anything to the command line itself, but if the
convert command encounters an error, that will be printed.`),A.forEach(n),$=_(e),d=g(e,"P",{});var C=y(d);P=I(C,"I hope you have found this article useful!"),C.forEach(n),this.h()},h(){N(m,"class","language-perl")},m(e,s){i(e,t,s),b(t,p),i(e,r,s),i(e,l,s),b(l,a),i(e,o,s),i(e,c,s),b(c,M),i(e,w,s),i(e,m,s),m.innerHTML=O,i(e,x,s),i(e,h,s),b(h,S),i(e,$,s),i(e,d,s),b(d,P)},p:Q,d(e){e&&n(t),e&&n(r),e&&n(l),e&&n(o),e&&n(c),e&&n(w),e&&n(m),e&&n(x),e&&n(h),e&&n($),e&&n(d)}}}function Y(u){let t,p;const r=[u[0],R];let l={$$slots:{default:[X]},$$scope:{ctx:u}};for(let a=0;a<r.length;a+=1)l=j(l,r[a]);return t=new W({props:l}),{c(){z(t.$$.fragment)},l(a){D(t.$$.fragment,a)},m(a,o){G(t,a,o),p=!0},p(a,[o]){const c=o&1?U(r,[o&1&&T(a[0]),o&0&&T(R)]):{};o&2&&(c.$$scope={dirty:o,ctx:a}),t.$set(c)},i(a){p||(V(t.$$.fragment,a),p=!0)},o(a){J(t.$$.fragment,a),p=!1},d(a){K(t,a)}}}const R={comments:!0,view:"post",layout:"post",lang:"en",author:"skamansam",title:"How To Repair Images with ImageMagick",description:"Using ImageMagick to repair corrupted images",excerpt:"the images [...] were taken with my phone's camera and all had errors",cover:!1,coverImage:!1,coverAlt:"RBE Logo",categories:["web-development"],tags:["Coppermine","Image Repair"],created_at:"2009-06-15T11:23:00.000Z",updated_at:"2009-06-15T11:23:00.000Z",readingTime:{text:"2 min read",minutes:1.58,time:94800,words:316},preview:`I have been doing a lot of importing of photos on my photo site, and have noticed some images do not display properly. 
Since I love ImageMagick so much,\xA0I set up\xA0 my gallery to use it. However, there appears to be a check in the Coppermine...`,previewHtml:"<p>I have been doing a lot of importing of photos on my photo site, and have noticed some images do not display properly. Since I love ImageMagick so much, I set up my gallery to use it. However, there appears to be a check in the Coppermine software th...</p>",textContent:`I have been doing a lot of importing of photos on my photo site, and have noticed some images do not display properly. 
Since I love ImageMagick so much,\xA0I set up\xA0 my gallery to use it. However, there appears to be a check in the Coppermine 
software that aborts reading the file upon errors in the...`};function ee(u,t,p){return u.$$set=r=>{p(0,t=j(j({},t),B(r)))},t=B(t),[t]}class oe extends L{constructor(t){super(),Z(this,t,ee,Y,q,{})}}export{oe as default,R as metadata};
