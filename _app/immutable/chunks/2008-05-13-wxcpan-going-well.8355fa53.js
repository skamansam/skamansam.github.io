import{S as R,i as j,s as D,C as T,y as O,z as Z,A as F,H as J,a0 as M,g as K,d as Q,B as V,L as q,k as v,q as f,a as I,l as _,m as g,r as P,h as l,c as k,n as Y,b as i,G as u,I as X}from"./index.8495bde4.js";import{P as ee}from"./post.46c75fab.js";function te(w){let t,r,c,n,a=`<code class="language-perl">perl <span class="token operator">-</span>MCPANPLUS <span class="token operator">-e</span> <span class="token string">'shell(Wx)'</span></code>`,s,p,A,x,m,L,S,E,N,C,h,b,d,$;return{c(){t=v("p"),r=f("I have successfully managed to implement a CPANPLUS::Shell.  You call the shell like:"),c=I(),n=v("pre"),s=I(),p=v("p"),A=f("I have created a perl script for testing this."),x=I(),m=v("p"),L=f("I have also created a new svn branch, "),S=v("code"),E=f("development"),N=f(". This is the current working branch."),C=I(),h=v("p"),b=f("You can view or download my current development code, via svn. "),d=v("a"),$=f(`See the googlecode
svn repo here`),this.h()},l(e){t=_(e,"P",{});var o=g(t);r=P(o,"I have successfully managed to implement a CPANPLUS::Shell.  You call the shell like:"),o.forEach(l),c=k(e),n=_(e,"PRE",{class:!0});var B=g(n);B.forEach(l),s=k(e),p=_(e,"P",{});var G=g(p);A=P(G,"I have created a perl script for testing this."),G.forEach(l),x=k(e),m=_(e,"P",{});var y=g(m);L=P(y,"I have also created a new svn branch, "),S=_(y,"CODE",{});var W=g(S);E=P(W,"development"),W.forEach(l),N=P(y,". This is the current working branch."),y.forEach(l),C=k(e),h=_(e,"P",{});var U=g(h);b=P(U,"You can view or download my current development code, via svn. "),d=_(U,"A",{href:!0,title:!0});var H=g(d);$=P(H,`See the googlecode
svn repo here`),H.forEach(l),U.forEach(l),this.h()},h(){Y(n,"class","language-perl"),Y(d,"href","http://code.google.com/p/wxcpan/source/browse"),Y(d,"title","")},m(e,o){i(e,t,o),u(t,r),i(e,c,o),i(e,n,o),n.innerHTML=a,i(e,s,o),i(e,p,o),u(p,A),i(e,x,o),i(e,m,o),u(m,L),u(m,S),u(S,E),u(m,N),i(e,C,o),i(e,h,o),u(h,b),u(h,d),u(d,$)},p:X,d(e){e&&l(t),e&&l(c),e&&l(n),e&&l(s),e&&l(p),e&&l(x),e&&l(m),e&&l(C),e&&l(h)}}}function ae(w){let t,r;const c=[w[0],z];let n={$$slots:{default:[te]},$$scope:{ctx:w}};for(let a=0;a<c.length;a+=1)n=T(n,c[a]);return t=new ee({props:n}),{c(){O(t.$$.fragment)},l(a){Z(t.$$.fragment,a)},m(a,s){F(t,a,s),r=!0},p(a,[s]){const p=s&1?J(c,[s&1&&M(a[0]),s&0&&M(z)]):{};s&2&&(p.$$scope={dirty:s,ctx:a}),t.$set(p)},i(a){r||(K(t.$$.fragment,a),r=!0)},o(a){Q(t.$$.fragment,a),r=!1},d(a){V(t,a)}}}const z={comments:!0,view:"post",layout:"post",lang:"en",author:"skamansam",title:"wxCPAN Going Well",description:"wxCPAN Going Well",excerpt:"I have successfully managed to implement a CPANPLUS::Shell.",cover:!1,coverImage:"/images/GSoC-logo-horizontal-800.png",coverAlt:"RBE Logo",categories:["perl"],tags:["gSoC"],created_at:"2008-05-13 14:56",updated_at:"2022-11-11T03:50:25.290Z",preview:`I have successfully managed to implement a CPANPLUS::Shell.  You call the shell like:

`,previewHtml:"<p>I have successfully managed to implement a CPANPLUS::Shell. You call the shell like:</p> <pre><code>perl -MCPANPLUS -e 'shell(Wx)' </code></pre>",textContent:`I have successfully managed to implement a CPANPLUS::Shell.  You call the shell like:



I have created a perl script for testing this.

I have also created a new svn branch, . This is the current working branch.

You can view or download my current development code, via svn. See the googlecode...`};function le(w,t,r){return w.$$set=c=>{r(0,t=T(T({},t),q(c)))},t=q(t),[t]}class ne extends R{constructor(t){super(),j(this,t,le,ae,D,{})}}export{ne as default,z as metadata};
