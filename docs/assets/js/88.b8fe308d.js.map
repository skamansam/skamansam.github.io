{"version":3,"sources":["webpack:///./node_modules/vue-global-events/dist/vue-global-events.es.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG,IAAI;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA,GAAG;;AAEH;AACA,qBAAqB,UAAU,iBAAiB,EAAE,EAAE;AACpD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;;AAEH,wBAAwB,YAAY,EAAE;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC","file":"assets/js/88.b8fe308d.js","sourcesContent":["/**\n * vue-global-events v1.2.0\n * (c) 2020 Damian Dulisz <damian.dulisz@gmail.com>, Eduardo San Martin Morote <posva13@gmail.com>\n * @license MIT\n */\n\nvar _isIE;\nfunction isIE () {\n  return _isIE == null\n    ? (_isIE = /msie|trident/.test(window.navigator.userAgent.toLowerCase()))\n    : _isIE\n}\n\nvar modifiersRE = /^[~!&]*/;\nvar nonEventNameCharsRE = /\\W+/;\nvar names = {\n  '!': 'capture',\n  '~': 'once',\n  '&': 'passive'\n};\n\nfunction extractEventOptions (eventDescriptor) {\n  var ref = eventDescriptor.match(modifiersRE);\n  var modifiers = ref[0];\n\n  // IE only supports capture option and it has to be a boolean\n  // https://github.com/shentao/vue-global-events/issues/14\n  if (isIE()) {\n    return modifiers.indexOf('!') > -1\n  }\n\n  return modifiers.split('').reduce(function (options, modifier) {\n    options[names[modifier]] = true;\n    return options\n  }, {})\n}\n\nvar index = {\n  name: 'GlobalEvents',\n  props: {\n    target: {\n      type: String,\n      default: 'document'\n    },\n    filter: {\n      type: Function,\n      default: function (e) { return true; }\n    }\n  },\n\n  // track keep-alive active state\n  data: function () { return ({ isActive: true }); },\n  activated: function activated () {\n    console.log('activated');\n    this.isActive = true;\n  },\n  deactivated: function deactivated () {\n    console.log('deactivated');\n    this.isActive = false;\n  },\n\n  render: function (h) { return h(); },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this._listeners = Object.create(null);\n    Object.keys(this.$listeners).forEach(function (event) {\n      var listener = this$1.$listeners[event];\n      var handler = function (e) {\n        this$1.isActive && this$1.filter(e, listener, event) && listener(e);\n      };\n      window[this$1.target].addEventListener(\n        event.replace(nonEventNameCharsRE, ''),\n        handler,\n        extractEventOptions(event)\n      );\n      this$1._listeners[event] = handler;\n    });\n  },\n\n  beforeDestroy: function beforeDestroy () {\n    var this$1 = this;\n\n    for (var event in this$1._listeners) {\n      window[this$1.target].removeEventListener(\n        event.replace(nonEventNameCharsRE, ''),\n        this$1._listeners[event],\n        extractEventOptions(event)\n      );\n    }\n  }\n};\n\nexport default index;\n"],"sourceRoot":""}