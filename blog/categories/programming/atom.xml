<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Rude Boy Solutions]]></title>
  <link href="http://skamansam.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://skamansam.github.io/"/>
  <updated>2016-09-15T10:23:20-04:00</updated>
  <id>http://skamansam.github.io/</id>
  <author>
    <name><![CDATA["Skaman Sam" Tyler]]></name>
    <email><![CDATA[skamansam@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fun With Numbers! (Revised)]]></title>
    <link href="http://skamansam.github.io/blog/2016/09/14/fun-with-numbers/"/>
    <updated>2016-09-14T07:56:00-04:00</updated>
    <id>http://skamansam.github.io/blog/2016/09/14/fun-with-numbers</id>
    <content type="html"><![CDATA[<div class='notice'>
  This post is heavy with math formualae, so may take a few seconds to format correctly.
</div>




<div class='notice'>
  This post was originally written 2009/05/29, but was never finished. I just
  finished the revisions on 2016/09/14 and it is now complete.
</div>


<p>I have always had a certain love for math and the neat things you can do with it. Here is a bit of information and shortcuts I have picked up in a few of my math classes.</p>

<h2>Pascal&rsquo;s Triangle</h2>

<p>Pascal&rsquo;s Triangle is a pretty neat thing. It is very simple to construct and can be used to understand a lot of different ideas. It follows a very simple form: start with a &lsquo;1&rsquo; and add the two digits above  to get the next number. The first few line look like this:</p>

<div class='center'>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>1
</span><span class='line'>1  1
</span><span class='line'>1  2  1
</span><span class='line'>1  3  3  1
</span><span class='line'>1  4  6  4  1
</span><span class='line'>1  5 10 10  5  1
</span><span class='line'>1  6 15 20 15  6  1
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>
</div>


<p>The line numbers start at 0, and continue on ad infinitum. In order to generate this triangle, programmatically, you would use something like this:</p>

<pre><code class="c++">vector&lt;int&gt; pascal(
      vector&lt;int&gt; prev, //the current (old) row data
      int *len,       //the length of the data
      int end,            //the row to retrieve
      int cur=0       //the current row we are on
      );

vector&lt;int&gt; pascal(vector&lt;int&gt; prev,int *len,int end,int cur){

       //return immediately if we are at the last row
      if (cur==end) return prev;

       //if the current vector length is 0, then set it to 1
          if (*len==0) *len=1;

          //create a temp vector (all 1's) to store the new row data
          vector&lt;int&gt; t((*len)+1,1);

          //sum the two rows
          for(int i=1;i&lt;(*len);i++)
            t[i]=prev[i-1]+prev[i];

          //increase the length by 1
          *len=(*len)+1;

          //return the new row data
          return pascal(t,len,end,cur+1);

}
</code></pre>

<h2>Binomial Expansion</h2></h2>

<p>Remember binomials from algebra? They were the pair of numbers used to create or simplify polynomial expressions, something like:</p>

<div class="tex">
$$ ( x + 3 )^3 = x^3 + 9x^2 + 27x + 27 $$
</div>


<p>You can use Pascal&rsquo;s triangle to find the coefficients of the polynomials. Let&rsquo;s begin by solving for the generic  case:</p>

<div class="tex">
$(a+b)^n = $
$(a+b)^{n-1}(a+b) = $
$(a+b)^{n-2}(a+b)^2 = $
$(a+b)^{n-2}((a+b)(a+b)) = $
$( (a*a) + (a*b) + (b*a) + (b*b) )(a+b)^{n-1} = $
$(a^2+2ab+b^2)(a+b)^{n-1} = $
</div>


<p>See the coefficients so far, with n=2 ? They are [1 2 1], which corresponds to the second row in Pascal&rsquo;s triangle. But this could be a fluke, right, so let&rsquo;s jump ahead to n=5 to see if that works as well.</p>

<div class="tex">
$(a+b)^n = $
$(a+b)^{n-6}(a+b)^5 = $
$(a+b)^{n-6}( (a+b) (a+b) (a+b) (a+b) (a+b) ) = $
$(a+b)^{n-6}( ( (a+b)(a+b) )( (a+b)(a+b) ) (a+b) ) = $
<br/>
[we know what $(a+b)^2$ is, so: ]
$(( a^2+2ab+b^2 )( a^2+2ab+b^2 )(a+b) )(a+b)^{n-6} = $
$( ( (a^2*a^2)+(a^2*2ab) + (a^2*b^2) + ( 2ab*a^2) + (2ab*2ab) + $
$(2ab*b^2) + (b^2*a^2)+(b^2*2ab) + (b^2*b^2) ) (a+b) )(a+b)^{n-6} = $
$( ( a^4 + 2a^3b+ a^2b^2 + 2a^3b + 4a^2b^2 + 2ab^3 + b^2a^2 + 2ab^3+ b^4) (a+b) )(a+b)^{n-6} = $
$( ( a^4 + 4a^3b + 6a2b^2 + 4ab^3+b^4) (a+b) )(a+b)^{n-6} = $
<br/>
[note: notice that the coefficients of $(a+b)^4$ are (1 4 6 4 1) ! ]
$( ( a^4*a + a^4*b + 4a^3b*a + 4a^3b*b + 6a^2b^2*a + $ <br/>
&nbsp;&nbsp;&nbsp;&nbsp;$6a^2b^2*b + 4ab^3*a + 4ab^3*b + b^4*a+b^4*b))(a+b)^{n-6} =$
$( ( a^5 + a^4b + 4a^4b + 4a^3b^2 + 6a^3b^2 + 6a^2b^3 + 4a^2b^3 + 4ab^4 + ab^4+b^5))(a+b)^{n-6}=$
$( ( a^5 +5a^4b + 10a^3b^2 + 10a^2b^3 + 5ab^4 + b^5)(a+b)^{n-6}$
</div>


<p>There it is! The coefficients correspond to the rows on Pascal&rsquo;s Triangle!</p>

<h3>Features</h3>

<p>Now, to make things a little simpler, I will note some interesting &ldquo;features&rdquo; about what we just did.</p>

<h4>General Formula for Binomial Expansion</h4>

<p>The general formula for binomial expansion is:</p>

<div class="tex">
$$(a+b)^n = \sum_{i=0}^{n}(P_{ni}a^{n-i}b^i)$$
</div>


<div class="tex">
Where $P_{ni}$ is the coefficient at row $n$ (starting from 0) and column $i$ in Pascal's Triangle. The formula means to add from $i=0$ to $n$ all the terms $(P_{ni}a^{n-i}b^i)$ , replacing $i$ with the number you are at. For example, supposing $i=3$, you would get:
</div>


<div class="tex">
$$\sum_{i=0}^{3}(P_{3i}a^{3-i}b^i) = $$
$$(P_{(3,0)}a^{3-0}b^0) + (P_{(3,1)}a^{3-1}b^1) + (P_{(3,2)}a^{3-2}b^2) + (P_{(3,3)}a^{3-3}b^3) = $$
since $P_3 = [1 3 3 1]$ , we finally get:
$$((1)a^{3-0}b^0) + ((3)a^{3-1}b^1) + ((3)a^{3-2}b^2) + ((1)a^{3-3}b^3) $$
cleaning up a bit :
$$a^3 + 3a^2b + 3ab^2 + b^3$$
</div>


<h4>Exponents</h4>

<p>Note in all the expansions, the first variable counts down from n to 0, while the second variable counts up from 0 to n.</p>

<h3>Does your binomial already have coefficients?</h3>

<p>If your binomial already has coefficients, simply put them with their terms like so:</p>

<div class="tex">
$$\sum_{i=0}^{n}(P_{ni}(xa)^{n-i}(yb)^i)$$
Using the commutative property, it can be rewritten as such:
$$\sum_{i=0}^{n}(P_{3i}(x^{n-i}y^{i})a^{n-i}b^i) $$

Let's try an example!<br/>
$(3a+2b)^3 = $<br/>
$(1)(3a)^{3}(2b)^0 + (3)(3a)^{2}(2b) + (3)(3a)(2b)^2 + (1)(2b)^3 = $<br/>
$(1)(3^3)a^3 + (3)(3^2*2)a^{2}b + (3)(3*2^2)ab^2 + (1)(2^3)b^3 = $<br/>
$(1)(27)a^3 + (3)(18)a^{2}b + (3)(12)ab^2 + (1)(8)b^3 = $<br/>
$27a^3 + 54a^{2}b + 36ab^2 + 8b^3$
</div>


<h1>Conclusion</h1>

<p>As you can see, it is fairly easy to use Pascal&rsquo;s Triagel as a lookup table for
binomial exapnsion&rsquo;s coefficients. I hope you have much more fun in your maths!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookie Detection in Rails 3]]></title>
    <link href="http://skamansam.github.io/blog/2013/04/23/cookie-detection-in-rails-3/"/>
    <updated>2013-04-23T17:14:12-04:00</updated>
    <id>http://skamansam.github.io/blog/2013/04/23/cookie-detection-in-rails-3</id>
    <content type="html"><![CDATA[<p>I have seen a lot of posts on cookie detection in Rails. I believe this may be a bad idea, in general, but here is a cheap way to detect whether or not cookies are enabled in the browser. Just add a before_filter that checks for the presence of the application&rsquo;s cookie.</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base

  before_filter :check_cookie

  ...

  private

  def check_cookie
    cookie_name = Rails.application.config.session_options[:key]
    if request.cookies[cookie_name].to_s.blank?
      flash[:error] = "To use this site, you must enable cookies in your browser's settings."
    end
  end

end
</code></pre>

<p>..And Voila! Now if your users try to view any page, they will see a nice Flash message about their cookies!</p>

<p>UPDATE 8-30-2016: Rails apps should use cookies. If users don&rsquo;t have cookies enabled, they should not be using your app. Plan for the future and leave behind older browsers. You are not expected to support everyone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Unified Time_select Field]]></title>
    <link href="http://skamansam.github.io/blog/2013/04/10/building-a-unified-time-select-field/"/>
    <updated>2013-04-10T11:10:11-04:00</updated>
    <id>http://skamansam.github.io/blog/2013/04/10/building-a-unified-time-select-field</id>
    <content type="html"><![CDATA[<p>Before I migrated to Rails 3.2, I used a plugin to provide a unified input field for time_select with either the standard Rails ActionView or the SimpleForm gem (SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade caused my gem to inexplicably stop working. I had a deadline to meet and could not be bothered with complicated solutions. I searched and searched for alternatives to this fine gem, but none were found. Then it hit me: why not just write my own code and replace the inputs with my own code? Surely it can&rsquo;t take too long to build a time input based on the simple_time_select gem! So here it is: my simple version of the gem, with only a few modifications from the simple_time_select gem.</p>

<p>Here is my old code, utilizing simple_time_select. The gem is used only if :simple_time_select is true, and it uses the :minute_interval, :time_separator, :start_hour, :end_hour, and a host of other options for setting the times. I wish it had a way for specifying just a start_time and end_time.</p>

<p>```ruby</p>

<div class="field">
  <%= f.input :start_time,
              :label=>"Start Time:",
              :default=>appt.start_time,
              :wrapper=>false,
              :simple_time_select => true,
              :label_html=>{:class=>"head"},
              :minute_interval => 5,
              :time_separator => "",
              :start_hour => 06,
              :end_hour => 17
   %>
</div>


<pre><code>
I had to search for an algorithm to use for the periodicity, and settled on the algorithm discussed in &lt;a href="http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times"&gt;this discussion on Stack Overflow&lt;/a&gt;, and is inlined as the :collection option. Since the :default option removes the inital blank I wanted as the first item in the list, I has to add a blank :include_blank option.
</code></pre>

<div class="field">
  <%- time_start = Time.now.change(:hour=>6,:minute=>0) %>
  <%- time_end = Time.now.change(:hour=>17,:minute=>55) %>
  <%- period = 5.minutes %>
  <%= f.input :start_time,
           :as=>:collection_select,
           :required=>true,
           :include_blank => '',
           :selected=>(
             f.object.start_time.blank? ?
               "" : f.object.start_time.strftime("%H:%M")
           ),
           :input_html=>{
             :name=>"appt[start_time(5i)]",
             :id=>"appt_start_time_5i"},
           :collection=> (
             [time_start].tap{
               |array| array << array.last + period
                 while array.last < time_end
             }).map{
               |t| [t.strftime("%l:%M %p"), t.strftime("%H:%M")]
             }
   %>
</div>


<p>```</p>

<p>I am sure you can wrap this in a Helper class somewhere, and it should be easy to monkeypatch ActiveView or SimpleForm to display this instead of the default.</p>

<p>References:</p>

<ul>
    <li><span style="line-height: 13px;"><a href="http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times" target="_blank">Stack Overflow discussion on time periodicity in Rails</a> (used for periodicity algorithm)</span></li>
    <li><a href="http://www.tonyamoyal.com/2009/04/21/simple-time-select-the-most-compact-time_select-for-ruby-on-rails/" target="_blank">Tutorial on using simple_time_select</a></li>
    <li><a href="https://github.com/plataformatec/simple_form" target="_blank">SimpleForm gem</a></li>
    <li><a href="https://github.com/tamoyal/simple_time_select" target="_blank">simple_time_select gem</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
