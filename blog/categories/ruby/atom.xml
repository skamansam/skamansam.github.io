<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Rude Boy Solutions]]></title>
  <link href="http://skamansam.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://skamansam.github.io/"/>
  <updated>2016-09-14T08:12:54-04:00</updated>
  <id>http://skamansam.github.io/</id>
  <author>
    <name><![CDATA["Skaman Sam" Tyler]]></name>
    <email><![CDATA[skamansam@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cookie Detection in Rails 3]]></title>
    <link href="http://skamansam.github.io/blog/2013/04/23/cookie-detection-in-rails-3/"/>
    <updated>2013-04-23T17:14:12-04:00</updated>
    <id>http://skamansam.github.io/blog/2013/04/23/cookie-detection-in-rails-3</id>
    <content type="html"><![CDATA[<p>I have seen a lot of posts on cookie detection in Rails. I believe this may be a bad idea, in general, but here is a cheap way to detect whether or not cookies are enabled in the browser. Just add a before_filter that checks for the presence of the application&rsquo;s cookie.</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base

  before_filter :check_cookie

  ...

  private

  def check_cookie
    cookie_name = Rails.application.config.session_options[:key]
    if request.cookies[cookie_name].to_s.blank?
      flash[:error] = "To use this site, you must enable cookies in your browser's settings."
    end
  end

end
</code></pre>

<p>..And Voila! Now if your users try to view any page, they will see a nice Flash message about their cookies!</p>

<p>UPDATE 8-30-2016: Rails apps should use cookies. If users don&rsquo;t have cookies enabled, they should not be using your app. Plan for the future and leave behind older browsers. You are not expected to support everyone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Unified Time_select Field]]></title>
    <link href="http://skamansam.github.io/blog/2013/04/10/building-a-unified-time-select-field/"/>
    <updated>2013-04-10T11:10:11-04:00</updated>
    <id>http://skamansam.github.io/blog/2013/04/10/building-a-unified-time-select-field</id>
    <content type="html"><![CDATA[<p>Before I migrated to Rails 3.2, I used a plugin to provide a unified input field for time_select with either the standard Rails ActionView or the SimpleForm gem (SimpleForm uses ActionView under the hood). I was happy until the Rails upgrade caused my gem to inexplicably stop working. I had a deadline to meet and could not be bothered with complicated solutions. I searched and searched for alternatives to this fine gem, but none were found. Then it hit me: why not just write my own code and replace the inputs with my own code? Surely it can&rsquo;t take too long to build a time input based on the simple_time_select gem! So here it is: my simple version of the gem, with only a few modifications from the simple_time_select gem.</p>

<p>Here is my old code, utilizing simple_time_select. The gem is used only if :simple_time_select is true, and it uses the :minute_interval, :time_separator, :start_hour, :end_hour, and a host of other options for setting the times. I wish it had a way for specifying just a start_time and end_time.</p>

<p>```ruby</p>

<div class="field">
  <%= f.input :start_time,
              :label=>"Start Time:",
              :default=>appt.start_time,
              :wrapper=>false,
              :simple_time_select => true,
              :label_html=>{:class=>"head"},
              :minute_interval => 5,
              :time_separator => "",
              :start_hour => 06,
              :end_hour => 17
   %>
</div>


<pre><code>
I had to search for an algorithm to use for the periodicity, and settled on the algorithm discussed in &lt;a href="http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times"&gt;this discussion on Stack Overflow&lt;/a&gt;, and is inlined as the :collection option. Since the :default option removes the inital blank I wanted as the first item in the list, I has to add a blank :include_blank option.
</code></pre>

<div class="field">
  <%- time_start = Time.now.change(:hour=>6,:minute=>0) %>
  <%- time_end = Time.now.change(:hour=>17,:minute=>55) %>
  <%- period = 5.minutes %>
  <%= f.input :start_time,
           :as=>:collection_select,
           :required=>true,
           :include_blank => '',
           :selected=>(
             f.object.start_time.blank? ?
               "" : f.object.start_time.strftime("%H:%M")
           ),
           :input_html=>{
             :name=>"appt[start_time(5i)]",
             :id=>"appt_start_time_5i"},
           :collection=> (
             [time_start].tap{
               |array| array << array.last + period
                 while array.last < time_end
             }).map{
               |t| [t.strftime("%l:%M %p"), t.strftime("%H:%M")]
             }
   %>
</div>


<p>```</p>

<p>I am sure you can wrap this in a Helper class somewhere, and it should be easy to monkeypatch ActiveView or SimpleForm to display this instead of the default.</p>

<p>References:</p>

<ul>
    <li><span style="line-height: 13px;"><a href="http://stackoverflow.com/questions/6783589/display-15-minute-steps-between-two-given-times" target="_blank">Stack Overflow discussion on time periodicity in Rails</a> (used for periodicity algorithm)</span></li>
    <li><a href="http://www.tonyamoyal.com/2009/04/21/simple-time-select-the-most-compact-time_select-for-ruby-on-rails/" target="_blank">Tutorial on using simple_time_select</a></li>
    <li><a href="https://github.com/plataformatec/simple_form" target="_blank">SimpleForm gem</a></li>
    <li><a href="https://github.com/tamoyal/simple_time_select" target="_blank">simple_time_select gem</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
